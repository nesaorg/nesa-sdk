"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Evaluate = exports.createDeliverTxFailureMessage = void 0;
const crypto_1 = require("@cosmjs/crypto");
const elliptic_1 = require("elliptic");
const bn_js_1 = __importDefault(require("bn.js"));
function createDeliverTxFailureMessage(result) {
    return `Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`;
}
exports.createDeliverTxFailureMessage = createDeliverTxFailureMessage;
function Evaluate(privateKey, m) {
    const EC = new elliptic_1.ec('secp256k1');
    const currentKey = EC.keyFromPrivate(privateKey);
    const r = EC.genKeyPair();
    const rBN = r.getPrivate();
    const toBytesInt32 = (num) => {
        return new Uint8Array([
            (num & 0xff000000) >> 24,
            (num & 0x00ff0000) >> 16,
            (num & 0x0000ff00) >> 8,
            num & 0x000000ff,
        ]);
    };
    const Unmarshal = (data) => {
        const byteLen = (EC.n.bitLength() + 7) >> 3;
        EC.g.mul(10);
        if ((data[0] & ~1) != 2) {
            return [null, null];
        }
        if (data.length != 1 + byteLen)
            return [null, null];
        const tx = new bn_js_1.default(data.slice(1, 1 + byteLen));
        try {
            const p = EC.curve.pointFromX(tx);
            return [p.x, p.y];
        }
        catch (e) {
            return [null, null];
        }
    };
    const H1 = (m) => {
        let x = null, y = null;
        const byteLen = (EC.n.bitLength() + 7) >> 3;
        let i = 0;
        while (x == null && i < 100) {
            const res = (0, crypto_1.sha512)(new Uint8Array([...toBytesInt32(i), ...m]));
            const r = [2, ...res];
            [x, y] = Unmarshal(r.slice(0, byteLen + 1));
            i++;
        }
        return EC.curve.point(x, y);
    };
    // H = H1(m)
    const pointH = H1(m);
    // VRF_k(m) = [k]H
    const point = pointH.mul(privateKey);
    // vrf 65 bytes
    const vrf = point.encode();
    const rgPoint = EC.curve.g.mul(rBN);
    const rhPoint = pointH.mul(rBN);
    const b = [
        ...EC.curve.g.encode(),
        ...pointH.encode(),
        ...currentKey.getPublic().encode(),
        ...vrf,
        ...rgPoint.encode(),
        ...rhPoint.encode(),
    ];
    const one = new bn_js_1.default(1);
    const H2 = (m) => {
        const byteLen = (EC.n.bitLength() + 7) >> 3;
        let i = 0;
        while (true) {
            const res = (0, crypto_1.sha512)(new Uint8Array([...toBytesInt32(i), ...m]));
            const k = new bn_js_1.default(res.slice(0, byteLen));
            if (k.cmp(EC.curve.n.sub(one)) == -1) {
                return k.add(one);
            }
            i++;
        }
    };
    const s = H2(b);
    const t = rBN.sub(s.mul(currentKey.getPrivate())).umod(EC.curve.n);
    const index = (0, crypto_1.sha256)(new Uint8Array(vrf));
    const buf = [
        ...new Array(32 - s.byteLength()).fill(0),
        ...s.toArray(),
        ...new Array(32 - t.byteLength()).fill(0),
        ...t.toArray(),
        ...vrf,
    ];
    return [index, buf];
}
exports.Evaluate = Evaluate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsMkNBQWdEO0FBQ2hELHVDQUE2QjtBQUM3QixrREFBc0I7QUFFdEIsU0FBZ0IsNkJBQTZCLENBQzNDLE1BQXlCO0lBRXpCLE9BQU8sOEJBQThCLE1BQU0sQ0FBQyxlQUFlLGNBQWMsTUFBTSxDQUFDLE1BQU0sV0FBVyxNQUFNLENBQUMsSUFBSSxjQUFjLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUM1SSxDQUFDO0FBSkQsc0VBSUM7QUFFRCxTQUFnQixRQUFRLENBQUMsVUFBZSxFQUFFLENBQU07SUFDOUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxhQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0IsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDMUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLENBQUMsR0FBUyxFQUFFLEVBQUU7UUFDakMsT0FBTyxJQUFJLFVBQVUsQ0FBQztZQUNwQixDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ3hCLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDeEIsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztZQUN2QixHQUFHLEdBQUcsVUFBVTtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUE7SUFDRCxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFO1FBQzlCLE1BQU0sT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENB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