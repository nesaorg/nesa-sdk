syntax = "proto3";
package agent.v1;

option go_package = "github.com/nesaorg/nesachain/x/agent/types";

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";

// Params defines the agent module's global params.
message Params { 
    option (amino.name) = "agent/params";

    // The minimum coins that needs to be locked when an inference agent registers
    cosmos.base.v1beta1.Coin agent_minimum_lock = 1 [ (gogoproto.nullable) = false ];

    // The minimum coins that needs to be locked when user registers a session
    cosmos.base.v1beta1.Coin user_minimum_lock = 2 [ (gogoproto.nullable) = false ];

    // When the session is created, the time period that inference agent can submit payment. 
    // After this period, the session will be automatically canceled.
    google.protobuf.Duration session_time = 3 [
      (gogoproto.nullable)    = false,
      (gogoproto.stdduration) = true
    ];
    // When the payment is submitted, the time period can be challenged. 
    // After this time window, the agent receives the reward specified by the session payment.
    google.protobuf.Duration challenge_time = 4 [
      (gogoproto.nullable)    = false,
      (gogoproto.stdduration) = true
    ];
    // Global vrf seed. Each user calculates their own vrf seed based on the global vrf seed when vrf is initialized.
    bytes global_seed = 5;
    // The minimum version number for agent registration/update,
    // registration/update is not allowed if the version number is lower than this one
    uint64 lowest_agent_version = 6;
    // The highest version number of agent registration/update, 
    // registration/update is not allowed if the version number is higher than this
    uint64 highest_agent_version = 7;
    // The challenge rate. It increases by 0.1% for each unit increment, 
    // where 0 indicates no challenge and 1000 indicates a 100% challenge rate.
    uint64 challenge_rate = 8;
    // The number of validators during the challenge. 
    // When the number of agents with corresponding models is lower than this number, the challenge will not be triggered.
    uint64 validator_count = 9;
    // During the challenge, the number of times the agent’s uploaded answer has been hashed.
    uint64 challenge_round = 10;
    // The time window for the challenged agent to upload cid.
    // If the problem cid is not uploaded beyond this time window, 
    // it will be judged as a breach of contract by the challenged agent.
    google.protobuf.Duration challenge_cid_time = 11 [
      (gogoproto.nullable)    = false,
      (gogoproto.stdduration) = true,
      (gogoproto.customname) = "ChallengeCIDTime"
    ];
    // The time window for the validator to upload reply hash.
    // If the reply hash is not uploaded beyond this time window, 
    // validator will be marked as absent.
    google.protobuf.Duration challenge_reply_time = 12 [
      (gogoproto.nullable)    = false,
      (gogoproto.stdduration) = true
    ];
    // The time window for the challenged agent to upload cut merkle tree.
    // If the merkle root is not uploaded beyond this time window, 
    // it will be judged as a breach of contract by the challenged agent.
    google.protobuf.Duration challenge_merkle_time = 13 [
      (gogoproto.nullable)    = false,
      (gogoproto.stdduration) = true
    ];
    // The time window for the validator to upload question origin hash.
    // If the question origin hash is not uploaded beyond this time window, 
    // validator will be marked as absent.
    google.protobuf.Duration challenge_origin_time = 14 [
      (gogoproto.nullable)    = false,
      (gogoproto.stdduration) = true
    ];
    // The time an agent is valid on the chain after registration/update. 
    // After this time is exceeded, the agent will be automatically marked as invalid.
    google.protobuf.Duration agent_valid_time = 15 [
      (gogoproto.nullable)    = false,
      (gogoproto.stdduration) = true
    ];
}

// InnerValues defines the values that changed by agent module.
message InnerValues {
  // The seed used by the module for VRF. It changes with each block and each usage.
  bytes seed = 1;
}

// AgentStatus enumerates the inference agent status.
enum AgentStatus {
  // AGENT_STATUS_ACTIVE represents the active status.
  AGENT_STATUS_ACTIVE = 0;
  // AGENT_STATUS_INACTIVE represents the inactive status.
  AGENT_STATUS_INACTIVE = 1;
}

// AgentModelStatus enumerates the each model status of inference agent.
enum AgentModelStatus {
  // AGENT_MODEL_STATUS_ACTIVE represents the active model status.
  AGENT_MODEL_STATUS_ACTIVE = 0;
  // AGENT_MODEL_STATUS_INACTIVE represents the inactive model status.
  AGENT_MODEL_STATUS_INACTIVE = 1;
}

// Prestige represents the prestige of inference agent.
message Prestige {
  // The number of sessions successfully completed by the inference agent.
  uint64 count = 1;
  // The total number of unes obtained by the inference agent after completing the session.
  uint64 total = 2;
}

// The inference agent represents the registered entity on the chain that provides the inference service.
message InferenceAgent {
  // The on-chain address of the inference agent
  string account = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // URL address that provides the inference service.
  string url = 2 [ (gogoproto.customname) = "URL" ];
  // The version of the inference agent.
  uint64 version = 3;
  // The prestige of the inference agent.
  Prestige prestige = 4 [ (gogoproto.nullable) = false ];
  // The status of the inference agent.
  AgentStatus status = 5;
  // The timestamp that agent becomes inactive.
  google.protobuf.Timestamp valid_until = 6 [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

// AgentModel defines the model that belongs to the inference agent.
message AgentModel {
  //The on-chain address of the inference node's AgentModel. 
  // This field indicates which inference agent the model belongs to.
  string account = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The name of the model.
  string model_name = 2;
  // The lock amount of this agent model.
  uint64 lock = 3;
  // The status of this agent model.
  AgentModelStatus status = 4;
}

// TokenPrice defines the price of the token used for payment.
message TokenPrice {
  cosmos.base.v1beta1.Coin input_price = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin output_price = 2 [(gogoproto.nullable) = false];
}

//PaymentContribution defines the participation ratio and amount obtained by each chain account during inference.
message PaymentContribution {
  // The chain account that participates in the inference.
  string account = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The participation ratio of the chain account.
  uint64 rate = 2;
  // The amount gained by the chain account.
  cosmos.base.v1beta1.Coin amount = 3;
}

// Payment represents the payment information of a session.
message Payment {
  // The number of tokens used for input.
  repeated uint64 input_tokens = 1;
  // The number of tokens used for output.
  repeated uint64 output_tokens = 2;
  // The merkle root of answer hash array.
  bytes merkle_root = 3;
  // The contributions of each participating account.
  repeated PaymentContribution contributions = 4 [ (gogoproto.nullable) = false ];
}

// ValidatorStatus enumerates the statuses of validators.
enum ValidatorStatus {
  // ValidatorStatusAbsent indicates the validator is absent to submit info on chain.
  ValidatorStatusAbsent = 0;
   // ValidatorStatusSubmit indicates the validator has submitted a response.
  ValidatorStatusSubmit = 1;
   // ValidatorStatusConsistent indicates the validator's response is consistent to majority.
  ValidatorStatusConsistent = 2;
  // ValidatorStatusInconsistent indicates the validator's response is inconsistent to majority.
  ValidatorStatusInconsistent = 3;
}

// Challenge validator information
message ChallengeValidator {
  // validator account
  string account = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The hash value of the validator's answer to the question. This value is mixed with the account address
  bytes hash = 2;
  // The original hash of the validator's answer to question
  bytes origin_hash = 3;
   // validator’s submit status
  ValidatorStatus status = 4;
}

// ChallengeInfo contains information about session challenge.
message ChallengeInfo {
  // The ID of the question being challenged.
  uint64 question_id = 1;
  // The location where the challenged question is stored
  string cid = 2 [ (gogoproto.customname) = "CID" ];
  // The hash of the answer. It is submitted by the challenged agent.
  bytes answer_hash = 3;
  // The cut merkle tree of the challenged question.
  repeated bytes cut_merkle = 4;
  // The validators of the challenge.
  repeated ChallengeValidator validators = 5;
  // The number of times the answer hash has been hashed.
  uint64 hash_count = 6;
}

// SessionStatus enumerates the statuses of a session.
enum SessionStatus {
  // SESSION_STATUS_DEFAULT is a placeholder and will not appear in session.
  SESSION_STATUS_DEFAULT = 0;
  // SESSION_STATUS_PENDING indicates the session is pending. It's waiting for the payment to be submitted.
  SESSION_STATUS_PENDING = 1;
  // SESSION_STATUS_SUBMITTED indicates the payment has been submitted.
  SESSION_STATUS_SUBMITTED = 2;
  // SESSION_STATUS_CHALLENGE_SUBMIT_CID indicates the session is waiting challenged agent to submit CID.
  SESSION_STATUS_CHALLENGE_SUBMIT_CID = 3;
  // SESSION_STATUS_CHALLENGE_SUBMIT_REPLY indicates the session is waiting validator to submit reply hash.
  SESSION_STATUS_CHALLENGE_SUBMIT_REPLY = 4;
  // SESSION_STATUS_CHALLENGE_SUBMIT_MERKLE indicates the session is waiting challenged agent to submit cut merkle tree.
  SESSION_STATUS_CHALLENGE_SUBMIT_MERKLE = 5;
  // SESSION_STATUS_CHALLENGE_SUBMIT_ORIGIN indicates the session is waiting validator to submit answer origin hash.
  SESSION_STATUS_CHALLENGE_SUBMIT_ORIGIN = 6;
  // SESSION_STATUS_CHALLENGE_ARBITRATION indicates the session is waiting admin to do arbitration.
  SESSION_STATUS_CHALLENGE_ARBITRATION = 7;
}

// Session represents an inference session.
message Session {
  // The ID of the session. It's compressed secp256k1 pubkey.
  string session_id = 1;
  // The account of the user who created and pay for the session.
  string account = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The name of the model used in the session
  string model_name = 3;
  // The account of the agent providing the model's inference service.
  string agent_account = 4 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The amount of coins locked by the user to do inference.
  cosmos.base.v1beta1.Coin user_lock = 5 [ (gogoproto.nullable) = false ];
  // The amount of coins locked by the inference agent.
  cosmos.base.v1beta1.Coin miner_lock = 6 [ (gogoproto.nullable) = false ];
  // the price of each token in session.
  TokenPrice token_price = 7 [ (gogoproto.nullable) = false ];
  // The expiration timestamp of the session.
  google.protobuf.Timestamp expiration_at = 8 [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
  // The payment information for the session.
  Payment payment = 9;
  // The status of the session.
  SessionStatus status = 10;
  // The challenge information for the session.
  repeated ChallengeInfo challenge_info = 11 [ (gogoproto.nullable) = false ];
}

// VrfSeed represents the VRF seed for each user.
message VrfSeed {
  // The account of the user.
  string account = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The VRF seed for the user.
  bytes seed = 2;
} 